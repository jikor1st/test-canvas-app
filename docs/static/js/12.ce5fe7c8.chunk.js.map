{"version":3,"file":"static/js/12.ce5fe7c8.chunk.js","mappings":"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","sources":["pages/index-page/index-page.page.tsx","pages/canvas-basic-draw/canvas-basic-draw.page.tsx","lib/utils/canvas/context.util.ts","lib/utils/canvas/draw.util.ts","lib/utils/canvas/method.util.ts","lib/utils/event/event.util.ts","lib/utils/utils.util.ts","pages/canvas-smooth-draw/canvas-smooth-draw.page.tsx","pages/canvas-resize-draw/canvas-resize-draw.page.tsx","pages/canvas-optimized-draw/canvas-optimized-draw.page.tsx","pages/canvas-color-width-draw/canvas-color-width-draw.page.tsx","components/tool-wrap/tool-wrap.component.tsx","components/zoom/zoom.component.tsx","components/color/color.component.tsx","components/line-width/line-width.component.tsx","pages/canvas-zoom-draw/canvas-zoom-draw.page.tsx","lib/hooks/use-condition-effect.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nconst IndexPage = () => {\r\n  return (\r\n    <Container>\r\n      <Box>\r\n        <Title>HTML5 Canvas 테스트</Title>\r\n        <Text>HTML5 Canvas 2D 드로잉을 테스트하는 페이지입니다.</Text>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\nconst Box = styled.div`\r\n  padding: 50px 0;\r\n  text-align: center;\r\n`;\r\nconst Title = styled.h1`\r\n  font-size: 36px;\r\n  line-height: 40px;\r\n  font-weight: bold;\r\n`;\r\nconst Text = styled.p`\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport { IndexPage };\r\n","import { useEffect, useState, useRef, PointerEvent } from 'react';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\nconst CanvasBasicDrawPage: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n  const canvasInformRef = useRef({\r\n    width: 0,\r\n    height: 0,\r\n    pixelRatio: window.devicePixelRatio > 1 ? 2 : 1,\r\n  });\r\n\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasRef.current) return;\r\n\r\n    const resultWidth = width * canvasInformRef.current.pixelRatio;\r\n    const resultHeight = height * canvasInformRef.current.pixelRatio;\r\n    canvasRef.current.width = resultWidth;\r\n    canvasRef.current.height = resultHeight;\r\n    canvasInformRef.current.width = resultWidth;\r\n    canvasInformRef.current.height = resultHeight;\r\n  };\r\n\r\n  const canvasContextSetting = (context: CanvasRenderingContext2D) => {\r\n    if (!context) return;\r\n    context.scale(\r\n      canvasInformRef.current.pixelRatio,\r\n      canvasInformRef.current.pixelRatio,\r\n    );\r\n    context.lineCap = 'round';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 3;\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasRef.current) return;\r\n    const { innerWidth, innerHeight } = window;\r\n    canvasSizeSetting(innerWidth, innerHeight);\r\n    const getContext = canvasRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    canvasContextSetting(getContext);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    setIsDown(true);\r\n    if (!contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(offsetX, offsetY);\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.lineTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    if (!contextRef.current) return;\r\n    contextRef.current.closePath();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <BaseCanvas\r\n        ref={canvasRef}\r\n        onPointerDown={handlePointerDown}\r\n        onPointerMove={handlePointerMove}\r\n        onPointerUp={handlePointerUp}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CanvasBasicDrawPage };\r\n","type ObjectXYType = { x: number; y: number };\r\n\r\nfunction pixelRatio(): number {\r\n  return window.devicePixelRatio > 1 ? 2 : 1;\r\n}\r\n\r\nfunction objectXY(x: number, y: number): ObjectXYType {\r\n  return { x: x, y: y };\r\n}\r\n\r\ntype ContextDotOptionsType = { x: number; y: number; radius: number };\r\nfunction drawDot(\r\n  context: CanvasRenderingContext2D,\r\n  { x, y, radius }: ContextDotOptionsType,\r\n): { context: CanvasRenderingContext2D } {\r\n  context.beginPath();\r\n  context.arc(x, y, radius, 0, Math.PI * 2, !0);\r\n  context.fill();\r\n  context.closePath();\r\n\r\n  return { context };\r\n}\r\n\r\ntype ContextLineWithQuadrationOptionsType = {\r\n  points: ObjectXYType[];\r\n};\r\n// version 1\r\nfunction drawLineCurve(\r\n  context: CanvasRenderingContext2D,\r\n  { points }: ContextLineWithQuadrationOptionsType,\r\n): void {\r\n  context.beginPath();\r\n  context.moveTo(points[0].x, points[0].y);\r\n\r\n  for (let i = 1, len = points.length; i < len - 2; i++) {\r\n    const cpx = points[i].x;\r\n    const cpy = points[i].y;\r\n    const x = (cpx + points[i + 1].x) / 2;\r\n    const y = (cpy + points[i + 1].y) / 2;\r\n\r\n    context.quadraticCurveTo(cpx, cpy, x, y);\r\n  }\r\n\r\n  context.stroke();\r\n}\r\n\r\ntype QuadraticWithPointsOptionsType = {\r\n  startPoint: ObjectXYType;\r\n  movePoints: ObjectXYType[];\r\n};\r\n\r\n// version 2\r\nfunction drawLineQuadraticWithPoints(\r\n  context: CanvasRenderingContext2D,\r\n  { startPoint, movePoints }: QuadraticWithPointsOptionsType,\r\n): { context: CanvasRenderingContext2D; endPoint: ObjectXYType } {\r\n  const lastTwoPoints = movePoints.slice(-2);\r\n  const controlPoint = lastTwoPoints[0];\r\n  const endPoint = {\r\n    x: (lastTwoPoints[0].x + lastTwoPoints[1].x) / 2,\r\n    y: (lastTwoPoints[0].y + lastTwoPoints[1].y) / 2,\r\n  };\r\n\r\n  context.beginPath();\r\n  context.moveTo(startPoint.x, startPoint.y);\r\n  context.quadraticCurveTo(\r\n    controlPoint.x,\r\n    controlPoint.y,\r\n    endPoint.x,\r\n    endPoint.y,\r\n  );\r\n  context.stroke();\r\n  context.closePath();\r\n\r\n  return { context, endPoint };\r\n}\r\nfunction canvasToDataUrl(\r\n  canvasEl: HTMLCanvasElement,\r\n  { type, quality }: { type?: string; quality?: number },\r\n) {\r\n  const imgType = type ?? 'image/jpeg';\r\n  const imgQuality = quality ?? 1.0;\r\n  try {\r\n    const dataURL = canvasEl.toDataURL(imgType, imgQuality);\r\n    return {\r\n      url: dataURL,\r\n      type: imgType,\r\n      quality: imgQuality,\r\n    };\r\n  } catch {\r\n    throw new Error();\r\n  }\r\n}\r\nfunction canvasDownloadImage(\r\n  canvasEl: HTMLCanvasElement,\r\n  {\r\n    imgName,\r\n    imgType,\r\n    imgQuality,\r\n  }: { imgName: string; imgType?: string; imgQuality?: number },\r\n) {\r\n  const { url, type } = canvasToDataUrl(canvasEl, {\r\n    type: imgType,\r\n    quality: imgQuality,\r\n  });\r\n\r\n  try {\r\n    const imgExtension = type.toString().trim().split('/')[1];\r\n\r\n    let link: HTMLAnchorElement | undefined = document.createElement('a');\r\n    link.download = `${imgName ?? 'download'}.${imgExtension}`;\r\n    link.href = url;\r\n    link.click();\r\n\r\n    link = undefined;\r\n  } catch {\r\n    throw new Error('Failed to download img');\r\n  }\r\n}\r\n\r\nconst contextUtils = {\r\n  pixelRatio,\r\n  objectXY,\r\n  drawDot,\r\n  drawLineCurve,\r\n  drawLineQuadraticWithPoints,\r\n  canvasDownloadImage,\r\n};\r\n\r\nexport { contextUtils };\r\nexport type {};\r\n","type RectOptionsProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  fillStyle?: string;\r\n  strokeStyle?: string;\r\n  lineWidth?: number;\r\n};\r\nfunction rect(\r\n  context: CanvasRenderingContext2D,\r\n  {\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    fillStyle,\r\n    strokeStyle,\r\n    lineWidth = 1,\r\n  }: RectOptionsProps,\r\n) {\r\n  context.save();\r\n  context.beginPath();\r\n  context.rect(x, y, width, height);\r\n  if (fillStyle) {\r\n    context.fillStyle = fillStyle;\r\n    context.fill();\r\n  }\r\n  if (strokeStyle) {\r\n    context.lineWidth = lineWidth;\r\n    context.strokeStyle = strokeStyle;\r\n    context.stroke();\r\n  }\r\n  context.restore();\r\n}\r\n\r\ntype CircleOptionsProps = {\r\n  x: number;\r\n  y: number;\r\n  radius: number;\r\n  startAngle?: number;\r\n  endAngle?: number;\r\n  fillStyle?: string;\r\n  strokeStyle?: string;\r\n  lineWidth?: number;\r\n};\r\nfunction circle(\r\n  context: CanvasRenderingContext2D,\r\n  {\r\n    x,\r\n    y,\r\n    radius,\r\n    startAngle = 0,\r\n    endAngle = 2 * Math.PI,\r\n    fillStyle,\r\n    strokeStyle,\r\n    lineWidth = 1,\r\n  }: CircleOptionsProps,\r\n) {\r\n  context.save();\r\n  context.beginPath();\r\n  context.arc(x, y, radius, startAngle, endAngle);\r\n  if (fillStyle) {\r\n    context.fillStyle = fillStyle;\r\n    context.fill();\r\n  }\r\n  if (strokeStyle) {\r\n    context.lineWidth = lineWidth;\r\n    context.strokeStyle = strokeStyle;\r\n    context.stroke();\r\n  }\r\n  context.restore();\r\n}\r\n\r\nconst draw = { rect, circle };\r\n\r\nexport { draw };\r\n","type SetTransformOptionsProps = {\r\n  scale?: {\r\n    h?: number;\r\n    v?: number;\r\n  };\r\n  skew?: {\r\n    h?: number;\r\n    v?: number;\r\n  };\r\n  move?: {\r\n    h?: number;\r\n    v?: number;\r\n  };\r\n};\r\nfunction setTransform(\r\n  context: CanvasRenderingContext2D,\r\n  { scale, skew, move }: SetTransformOptionsProps,\r\n) {\r\n  context.setTransform(\r\n    scale?.h ?? 1,\r\n    skew?.h ?? 0,\r\n    skew?.v ?? 0,\r\n    scale?.v ?? 1,\r\n    move?.h ?? 0,\r\n    move?.v ?? 0,\r\n  );\r\n}\r\n\r\nconst methodUtils = { setTransform };\r\n\r\nexport { methodUtils };\r\n","import { TouchEvent, Touch } from 'react';\r\n\r\nfunction touches({ nativeEvent }: TouchEvent) {\r\n  // return nativeEvent.touches as Touch;\r\n}\r\n\r\n// const eventPosition = e => {\r\n//   const x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;\r\n//   const y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;\r\n//   return { x: x ?? 0, y: y ?? 0 };\r\n// };\r\n\r\nconst eventUtils = {\r\n  touches,\r\n};\r\n\r\nexport { eventUtils };\r\n","import { contextUtils, draw, methodUtils } from './canvas';\r\nimport { eventUtils } from './event';\r\nconst utils = {\r\n  context: { ...contextUtils },\r\n  draw: draw,\r\n  event: eventUtils,\r\n  method: methodUtils,\r\n};\r\n\r\nexport { utils };\r\n","import { useEffect, useState, useRef, PointerEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { lazily } from 'react-lazily';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// base-components\r\nconst { BaseCanvas } = lazily(() => import('@/base-components'));\r\n\r\nconst pixelRatio = window.devicePixelRatio > 1 ? 2 : 1;\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasSmoothDrawPage: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const canvasInformRef = useRef({ width: 0, height: 0 });\r\n  const pptsRef = useRef<pointType[]>([]);\r\n\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    initCanvas();\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (\r\n    canvasElement: HTMLCanvasElement,\r\n    target: Window | HTMLElement,\r\n  ) => {\r\n    let width = 0;\r\n    let height = 0;\r\n    if (target === window) {\r\n      const { innerWidth, innerHeight } = target as Window;\r\n      width = innerWidth;\r\n      height = innerHeight;\r\n    } else {\r\n      const { offsetWidth, offsetHeight } = target as HTMLElement;\r\n      width = offsetWidth;\r\n      height = offsetHeight;\r\n    }\r\n\r\n    const resultWidth = width * pixelRatio;\r\n    const resultHeight = height * pixelRatio;\r\n    canvasElement.width = resultWidth;\r\n    canvasElement.height = resultHeight;\r\n    canvasInformRef.current = { width: resultWidth, height: resultHeight };\r\n  };\r\n  const canvasContextSetting = (canvasElement: HTMLCanvasElement) => {\r\n    const getContext = canvasElement.getContext('2d');\r\n\r\n    if (!getContext) return;\r\n\r\n    getContext.scale(pixelRatio, pixelRatio);\r\n    getContext.lineCap = 'round';\r\n    getContext.strokeStyle = 'black';\r\n    getContext.lineWidth = 3;\r\n    contextRef.current = getContext;\r\n  };\r\n\r\n  const initCanvas = () => {\r\n    if (!canvasRef.current || !containerRef.current) return;\r\n    const canvasEl = canvasRef.current;\r\n    const containerEl = containerRef.current;\r\n    canvasSizeSetting(canvasEl, containerEl);\r\n    canvasContextSetting(canvasEl);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    if (!contextRef.current) return;\r\n    setIsDown(true);\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    pptsRef.current.push({ x: offsetX, y: offsetY });\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const ppts = pptsRef.current;\r\n    ppts.push({ x: offsetX, y: offsetY });\r\n\r\n    utils.context.drawLineCurve(contextRef.current, { points: ppts });\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    pptsRef.current = [];\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CanvasWrap ref={containerRef}>\r\n        <BaseCanvas\r\n          ref={canvasRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 0;\r\n`;\r\n\r\nexport { CanvasSmoothDrawPage };\r\n","import {\r\n  useEffect,\r\n  useState,\r\n  useRef,\r\n  MouseEvent,\r\n  TouchEvent,\r\n  PointerEvent,\r\n  Suspense,\r\n} from 'react';\r\nimport PolyfillResizeObserver from 'resize-observer-polyfill';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasResizeDrawPage: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const canvasInformRef = useRef({\r\n    width: 0,\r\n    height: 0,\r\n    pixelRatio: utils.context.pixelRatio(),\r\n  });\r\n  const pptsRef = useRef<pointType[]>([]);\r\n\r\n  const ContainerResizeObserverRef = useRef<ResizeObserver>();\r\n\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    init();\r\n    initObserver();\r\n\r\n    return () => {\r\n      if (!ContainerResizeObserverRef.current || !containerRef.current) return;\r\n      ContainerResizeObserverRef.current.unobserve(containerRef.current);\r\n      ContainerResizeObserverRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasRef.current) return;\r\n\r\n    const resultWidth = width * canvasInformRef.current.pixelRatio;\r\n    const resultHeight = height * canvasInformRef.current.pixelRatio;\r\n    canvasRef.current.width = resultWidth;\r\n    canvasRef.current.height = resultHeight;\r\n    canvasInformRef.current.width = resultWidth;\r\n    canvasInformRef.current.height = resultHeight;\r\n  };\r\n\r\n  const canvasContextSetting = (context: CanvasRenderingContext2D) => {\r\n    if (!context) return;\r\n    context.scale(\r\n      canvasInformRef.current.pixelRatio,\r\n      canvasInformRef.current.pixelRatio,\r\n    );\r\n    context.lineCap = 'round';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 3;\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasRef.current || !containerRef.current) return;\r\n    const { clientWidth, clientHeight } = containerRef.current;\r\n    canvasSizeSetting(clientWidth, clientHeight);\r\n    const getContext = canvasRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    canvasContextSetting(getContext);\r\n  };\r\n\r\n  const initObserver = () => {\r\n    if (!containerRef.current) return;\r\n    ContainerResizeObserverRef.current = window.ResizeObserver\r\n      ? new ResizeObserver(entries => {\r\n          for (let entry of entries) {\r\n            if (entry.contentBoxSize) {\r\n              const contentBoxSize = Array.isArray(entry.contentBoxSize)\r\n                ? entry.contentBoxSize[0]\r\n                : entry.contentBoxSize;\r\n              if (contextRef.current) {\r\n                // canvasInformRef.current.pixelRatio = utils.context.pixelRatio();\r\n                // const tempSize = canvasInformRef.current;\r\n                try {\r\n                  const temp = contextRef.current.getImageData(\r\n                    0,\r\n                    0,\r\n                    canvasInformRef.current.width,\r\n                    canvasInformRef.current.height,\r\n                  );\r\n                  canvasSizeSetting(\r\n                    contentBoxSize.inlineSize,\r\n                    contentBoxSize.blockSize,\r\n                  );\r\n                  canvasContextSetting(contextRef.current);\r\n                  contextRef.current.putImageData(\r\n                    temp,\r\n                    0,\r\n                    0,\r\n                    // 0,\r\n                    // 0,\r\n                    // contentBoxSize.inlineSize + tempSize.width,\r\n                    // contentBoxSize.blockSize + tempSize.height,\r\n                  );\r\n                } catch (err) {}\r\n              }\r\n            }\r\n          }\r\n        })\r\n      : new PolyfillResizeObserver(entries => {});\r\n    ContainerResizeObserverRef.current.observe(containerRef.current);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    if (!contextRef.current) return;\r\n    setIsDown(true);\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    pptsRef.current.push({ x: offsetX, y: offsetY });\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const ppts = pptsRef.current;\r\n    ppts.push({ x: offsetX, y: offsetY });\r\n\r\n    utils.context.drawLineCurve(contextRef.current, { points: ppts });\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    pptsRef.current = [];\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CanvasWrap ref={containerRef}>\r\n        <BaseCanvas\r\n          ref={canvasRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 0;\r\n  position: relative;\r\n`;\r\n\r\nexport { CanvasResizeDrawPage };\r\n","import { useEffect, useState, useRef, PointerEvent } from 'react';\r\nimport PolyfillResizeObserver from 'resize-observer-polyfill';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasOptimizedDrawPage: React.FC = () => {\r\n  // element\r\n  const containerElRef = useRef<HTMLDivElement>(null);\r\n  const canvasElRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // object\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const informRef = useRef({\r\n    stageWidth: 0,\r\n    stageHeight: 0,\r\n    pixelRatio: utils.context.pixelRatio(),\r\n  });\r\n\r\n  const containerResizeObserverRef = useRef<ResizeObserver>();\r\n\r\n  // variable\r\n  const startPointRef = useRef({ x: 0, y: 0 });\r\n  const movePointsRef = useRef<pointType[]>([]);\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    init();\r\n    initObserver();\r\n    return () => {};\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasElRef.current) return;\r\n\r\n    const resultWidth = width * informRef.current.pixelRatio;\r\n    const resultHeight = height * informRef.current.pixelRatio;\r\n    canvasElRef.current.width = resultWidth;\r\n    canvasElRef.current.height = resultHeight;\r\n    informRef.current.stageWidth = resultWidth;\r\n    informRef.current.stageHeight = resultHeight;\r\n  };\r\n\r\n  const canvasContextSetting = (context: CanvasRenderingContext2D) => {\r\n    context.scale(informRef.current.pixelRatio, informRef.current.pixelRatio);\r\n    context.lineCap = 'round';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 3;\r\n\r\n    return context;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasElRef.current) return;\r\n    const { clientWidth, clientHeight } = canvasElRef.current;\r\n    canvasSizeSetting(clientWidth, clientHeight);\r\n    const getContext = canvasElRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    const context = canvasContextSetting(getContext);\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const initObserver = () => {\r\n    if (!containerElRef.current) return;\r\n    containerResizeObserverRef.current = window.ResizeObserver\r\n      ? new ResizeObserver(entries => {\r\n          for (let entry of entries) {\r\n            if (entry.contentBoxSize) {\r\n              const contentBoxSize = Array.isArray(entry.contentBoxSize)\r\n                ? entry.contentBoxSize[0]\r\n                : entry.contentBoxSize;\r\n              if (contextRef.current) {\r\n                try {\r\n                  const temp = contextRef.current.getImageData(\r\n                    0,\r\n                    0,\r\n                    informRef.current.stageWidth,\r\n                    informRef.current.stageHeight,\r\n                  );\r\n                  canvasSizeSetting(\r\n                    contentBoxSize.inlineSize,\r\n                    contentBoxSize.blockSize,\r\n                  );\r\n                  const context = canvasContextSetting(contextRef.current);\r\n                  contextRef.current = context;\r\n                  contextRef.current.putImageData(temp, 0, 0);\r\n                } catch (err) {}\r\n              }\r\n            }\r\n          }\r\n        })\r\n      : new PolyfillResizeObserver(entries => {});\r\n    containerResizeObserverRef.current.observe(containerElRef.current);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    setIsDown(true);\r\n    if (!contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n    startPointRef.current = { x: offsetX, y: offsetY };\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context, endPoint } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n      startPointRef.current = endPoint;\r\n    }\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    if (!contextRef.current) return;\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n    }\r\n    movePointsRef.current = [];\r\n    startPointRef.current = { x: 0, y: 0 };\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CanvasWrap ref={containerElRef}>\r\n        <BaseCanvas\r\n          ref={canvasElRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 0;\r\n  position: relative;\r\n`;\r\n\r\nexport { CanvasOptimizedDrawPage };\r\n","import { useEffect, useState, useRef, PointerEvent, ChangeEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// containers\r\nimport { ColorWidthToolsContainer } from '@/containers';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasColorWidthDrawPage: React.FC = () => {\r\n  // element\r\n  const containerElRef = useRef<HTMLDivElement>(null);\r\n  const canvasElRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // object\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const informRef = useRef({\r\n    stageWidth: 0,\r\n    stageHeight: 0,\r\n    pixelRatio: utils.context.pixelRatio(),\r\n  });\r\n\r\n  // variable\r\n  const startPointRef = useRef({ x: 0, y: 0 });\r\n  const movePointsRef = useRef<pointType[]>([]);\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  const [color, setColor] = useState<string>('#000000');\r\n  const [lineWidth, setLineWidth] = useState<number>(3);\r\n\r\n  useEffect(() => {\r\n    init();\r\n    return () => {\r\n      movePointsRef.current = [];\r\n    };\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasElRef.current) return;\r\n\r\n    const resultWidth = width * informRef.current.pixelRatio;\r\n    const resultHeight = height * informRef.current.pixelRatio;\r\n    canvasElRef.current.width = resultWidth;\r\n    canvasElRef.current.height = resultHeight;\r\n    informRef.current.stageWidth = resultWidth;\r\n    informRef.current.stageHeight = resultHeight;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasElRef.current || !canvasElRef.current || !containerElRef.current)\r\n      return;\r\n    const { clientWidth, clientHeight } = containerElRef.current;\r\n    canvasSizeSetting(clientWidth, clientHeight);\r\n    const getContext = canvasElRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    getContext.scale(\r\n      informRef.current.pixelRatio,\r\n      informRef.current.pixelRatio,\r\n    );\r\n    getContext.lineCap = 'round';\r\n    getContext.strokeStyle = color;\r\n    getContext.fillStyle = color;\r\n    getContext.lineWidth = lineWidth;\r\n    contextRef.current = getContext;\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    setIsDown(true);\r\n    if (!contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const { context } = utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    contextRef.current = context;\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n    startPointRef.current = { x: offsetX, y: offsetY };\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context, endPoint } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n      startPointRef.current = endPoint;\r\n    }\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    if (!isDown || !contextRef.current) return;\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n    }\r\n    setIsDown(false);\r\n    movePointsRef.current = [];\r\n    startPointRef.current = { x: 0, y: 0 };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!contextRef.current) return;\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.fillStyle = color;\r\n  }, [color]);\r\n  useEffect(() => {\r\n    if (!contextRef.current) return;\r\n    contextRef.current.lineWidth = lineWidth;\r\n  }, [lineWidth]);\r\n\r\n  const handleChangeColor = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!contextRef.current) return;\r\n    setColor(prev => (prev !== e.target.value ? e.target.value : prev));\r\n  };\r\n  const handleChangeRange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!contextRef.current) return;\r\n    const numValue = parseInt(e.target.value, 10);\r\n    setLineWidth(prev => (prev !== numValue ? numValue : prev));\r\n  };\r\n  const handleClickSave = () => {\r\n    if (!contextRef.current || !canvasElRef.current) return;\r\n    utils.context.canvasDownloadImage(canvasElRef.current, {\r\n      imgName: 'test',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ColorWidthToolsContainer\r\n        onChangeColor={handleChangeColor}\r\n        onChangeRange={handleChangeRange}\r\n        onClickSave={handleClickSave}\r\n        color={color}\r\n        lineWidth={lineWidth}\r\n      />\r\n      <CanvasWrap ref={containerElRef}>\r\n        <BaseCanvas\r\n          ref={canvasElRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: calc(100% - 50px);\r\n  font-size: 0;\r\n  position: relative;\r\n`;\r\n\r\nexport { CanvasColorWidthDrawPage };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype ToolWrapProps = {\r\n  modules?: React.ReactNode[];\r\n};\r\nconst ToolWrap: React.FC<ToolWrapProps> = React.memo(({ modules }) => {\r\n  return (\r\n    <Container>\r\n      <Tools>{React.Children.toArray(modules)}</Tools>\r\n    </Container>\r\n  );\r\n});\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 80px;\r\n  height: 50px;\r\n  padding: 0 20px;\r\n  border-bottom: 1px solid #cccccc;\r\n`;\r\nconst Tools = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 10px;\r\n`;\r\nconst ColGroup = styled.div``;\r\n\r\nexport { ToolWrap };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\ntype ZoomProps = {\r\n  zoom: number;\r\n  onClickZoom: (value: string) => void;\r\n};\r\n\r\nconst Zoom: React.FC<ZoomProps> = React.memo(({ zoom, onClickZoom }) => {\r\n  return (\r\n    <Container>\r\n      <ZoomButton onClick={() => onClickZoom('+')}>+</ZoomButton>\r\n      <ZoomText>{parseFloat((zoom * 100).toFixed(1))}%</ZoomText>\r\n      <ZoomButton onClick={() => onClickZoom('-')}>-</ZoomButton>\r\n    </Container>\r\n  );\r\n});\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst ZoomText = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n  width: 80px;\r\n  overflow: hidden;\r\n`;\r\nconst ZoomButton = styled.button``;\r\n\r\nexport { Zoom };\r\n","import { ChangeEventHandler } from 'react';\r\nimport styled from 'styled-components';\r\ntype ColorProps = {\r\n  color?: string;\r\n  onChangeColor?: ChangeEventHandler;\r\n};\r\nconst Color: React.FC<ColorProps> = ({ color, onChangeColor }) => {\r\n  return (\r\n    <Container>\r\n      <ColorPalette onChange={onChangeColor} value={color} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div``;\r\n\r\nconst ColorPalette = styled.input.attrs(() => ({\r\n  type: 'color',\r\n}))``;\r\n\r\nexport { Color };\r\n","import React, { ChangeEventHandler } from 'react';\r\nimport styled from 'styled-components';\r\ntype LineWidthProps = {\r\n  lineWidth: number;\r\n  onChangeLineWidth?: ChangeEventHandler;\r\n};\r\n\r\nconst LineWidth: React.FC<LineWidthProps> = React.memo(\r\n  ({ lineWidth, onChangeLineWidth }) => {\r\n    return (\r\n      <Container>\r\n        <LineWidthRange onChange={onChangeLineWidth} value={lineWidth} />\r\n        {lineWidth}\r\n      </Container>\r\n    );\r\n  },\r\n);\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 8px;\r\n`;\r\n\r\nconst LineWidthRange = styled.input.attrs(() => ({\r\n  type: 'range',\r\n}))``;\r\n\r\nexport { LineWidth };\r\n","import React, {\r\n  useMemo,\r\n  useEffect,\r\n  useState,\r\n  useRef,\r\n  PointerEvent as ReactPointerEvent,\r\n  useCallback,\r\n} from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n//hooks\r\nimport { useConditionEffect } from '@/lib/hooks';\r\n// components\r\nimport { ToolWrap, Color, LineWidth, Zoom } from '@/components';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\n\r\nconst ZOOM_DIGIT = 200;\r\nconst ZOOM_MIN = 0.1;\r\nconst ZOOM_MAX = 4;\r\n\r\nconst CanvasZoomDrawPage: React.FC = () => {\r\n  // element\r\n  const containerElRef = useRef<HTMLDivElement>(null);\r\n  const canvasElRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // object\r\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n  const pointsRef: any = useRef({\r\n    down: [],\r\n    move: [],\r\n  });\r\n  const distanceRef = useRef({\r\n    down: 0,\r\n    move: 0,\r\n    up: ZOOM_DIGIT,\r\n  });\r\n  const centerPosRef = useRef({\r\n    down: { x: 0, y: 0 },\r\n    move: { x: 0, y: 0 },\r\n    up: { x: 0, y: 0 },\r\n  });\r\n\r\n  // variable\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n  const [zoom, setZoom] = useState<number>(1);\r\n  const [translate, setTranslate] = useState<pointType>({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  const init = () => {\r\n    if (!canvasElRef.current || !canvasElRef.current || !containerElRef.current)\r\n      return;\r\n\r\n    const containerRect = containerElRef.current.getBoundingClientRect();\r\n\r\n    canvasElRef.current.width = containerRect.width;\r\n    canvasElRef.current.height = containerRect.height;\r\n\r\n    const getContext = canvasElRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    contextRef.current = getContext;\r\n    contextRef.current.canvas.width = containerRect.width;\r\n    contextRef.current.canvas.height = containerRect.height;\r\n\r\n    drawCanvas();\r\n  };\r\n\r\n  const drawCanvas = () => {\r\n    if (!contextRef.current || !canvasElRef.current) return;\r\n    const canvasWidth = 420;\r\n    const canvasHeight = 420;\r\n    utils.draw.rect(contextRef.current, {\r\n      x: canvasElRef.current.width / 2 - canvasWidth / 2,\r\n      y: canvasElRef.current.height / 2 - canvasHeight / 2,\r\n      width: canvasWidth,\r\n      height: canvasHeight,\r\n      fillStyle: '#ffffff',\r\n    });\r\n  };\r\n\r\n  const getCenter = (p1: pointType, p2: pointType) => {\r\n    return {\r\n      x: (p1.x + p2.x) / 2,\r\n      y: (p1.y + p2.y) / 2,\r\n    };\r\n  };\r\n\r\n  const getDistance = (p1: pointType, p2: pointType) => {\r\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\r\n  };\r\n\r\n  const multiPointer = (targetPoints: any, pointEvent: PointerEvent) => {\r\n    const findIndex = targetPoints.findIndex(\r\n      (item: any) => item.pointerId === pointEvent.pointerId,\r\n    );\r\n\r\n    if (findIndex === -1) {\r\n      targetPoints.push(pointEvent);\r\n    } else {\r\n      targetPoints[findIndex] = pointEvent;\r\n    }\r\n  };\r\n\r\n  const onDown = ({ nativeEvent }: ReactPointerEvent) => {\r\n    if (!contextRef.current) return;\r\n    setIsDown(true);\r\n\r\n    multiPointer(pointsRef.current.down, nativeEvent);\r\n\r\n    if (pointsRef.current.down.length >= 2) {\r\n      const [touch1, touch2] = pointsRef.current.down;\r\n      const p1 = {\r\n        x: touch1.offsetX,\r\n        y: touch1.offsetY,\r\n      };\r\n      const p2 = {\r\n        x: touch2.offsetX,\r\n        y: touch2.offsetY,\r\n      };\r\n      const center = getCenter(p1, p2);\r\n      const distance = getDistance(p1, p2);\r\n      centerPosRef.current.down = center;\r\n      distanceRef.current.down = distance;\r\n    }\r\n  };\r\n\r\n  const onMove = ({ nativeEvent }: ReactPointerEvent) => {\r\n    if (!isDown || !contextRef.current || !canvasElRef.current) return;\r\n\r\n    multiPointer(pointsRef.current.move, nativeEvent);\r\n\r\n    if (pointsRef.current.move.length >= 2) {\r\n      const [touch1, touch2] = pointsRef.current.move;\r\n      const p1 = {\r\n        x: touch1.offsetX,\r\n        y: touch1.offsetY,\r\n      };\r\n      const p2 = {\r\n        x: touch2.offsetX,\r\n        y: touch2.offsetY,\r\n      };\r\n      const center = getCenter(p1, p2);\r\n      const distance = getDistance(p1, p2);\r\n      const diffCenter = {\r\n        x: center.x - centerPosRef.current.down.x + centerPosRef.current.up.x,\r\n        y: center.y - centerPosRef.current.down.y + centerPosRef.current.up.y,\r\n      };\r\n      const diffDistance =\r\n        distance - distanceRef.current.down + distanceRef.current.up;\r\n\r\n      centerPosRef.current.move = diffCenter;\r\n      setTranslate(prev =>\r\n        diffCenter.x !== prev.x || diffCenter.y !== prev.y ? diffCenter : prev,\r\n      );\r\n\r\n      const newZoom = diffDistance / ZOOM_DIGIT;\r\n      setZoom(prev =>\r\n        setZoomMinMax(prev, newZoom, () => {\r\n          distanceRef.current.move = diffDistance;\r\n        }),\r\n      );\r\n    }\r\n  };\r\n\r\n  const setZoomMinMax = (\r\n    prevValue: number,\r\n    newValue: number,\r\n    isValid?: () => void,\r\n  ) => {\r\n    if (ZOOM_MIN <= newValue && newValue <= ZOOM_MAX) {\r\n      typeof isValid === 'function' && isValid();\r\n      return parseFloat(newValue.toFixed(3));\r\n    } else {\r\n      return prevValue;\r\n    }\r\n  };\r\n\r\n  const toFixed = (num: number) => {\r\n    return parseInt(num.toFixed(1));\r\n  };\r\n\r\n  const onUp = () => {\r\n    setIsDown(false);\r\n    centerPosRef.current.up = centerPosRef.current.move;\r\n    distanceRef.current.up = distanceRef.current.move;\r\n    pointsRef.current.down = [];\r\n    pointsRef.current.move = [];\r\n  };\r\n\r\n  useConditionEffect(\r\n    () => {\r\n      redraw({\r\n        translate: translate,\r\n        zoomState: zoom,\r\n      });\r\n    },\r\n    [translate, zoom],\r\n    { componentDidUpdateCondition: true },\r\n  );\r\n\r\n  const redraw = ({\r\n    translate,\r\n    zoomState = 1,\r\n  }: {\r\n    translate: pointType;\r\n    zoomState: number;\r\n  }) => {\r\n    if (!contextRef.current || !canvasElRef.current) return;\r\n    contextRef.current.clearRect(\r\n      0,\r\n      0,\r\n      canvasElRef.current.width,\r\n      canvasElRef.current.height,\r\n    );\r\n    utils.method.setTransform(contextRef.current, {\r\n      scale: { h: zoomState, v: zoomState },\r\n      move: { h: translate.x, v: translate.y },\r\n    });\r\n    drawCanvas();\r\n  };\r\n\r\n  const handleClickZoom = useCallback((value: string) => {\r\n    const digit = 0.1;\r\n    if (value === '+') {\r\n      setZoom(prev =>\r\n        setZoomMinMax(prev, toFixed(prev + digit), () => {\r\n          distanceRef.current.move = toFixed(prev + digit) * ZOOM_DIGIT;\r\n        }),\r\n      );\r\n    } else if (value === '-') {\r\n      setZoom(prev =>\r\n        setZoomMinMax(prev, toFixed(prev - digit), () => {\r\n          distanceRef.current.move = toFixed(prev - digit) * ZOOM_DIGIT;\r\n        }),\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <ToolWrap\r\n        modules={useMemo(\r\n          () => [<Zoom zoom={zoom} onClickZoom={handleClickZoom} />],\r\n          [zoom],\r\n        )}\r\n      />\r\n      <CanvasWrap ref={containerElRef}>\r\n        <BaseCanvas\r\n          ref={canvasElRef}\r\n          onPointerDown={onDown}\r\n          onPointerMove={onMove}\r\n          onPointerUp={onUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: calc(100% - 50px);\r\n  font-size: 0;\r\n  position: relative;\r\n  background: #cccccc;\r\n`;\r\n\r\nexport { CanvasZoomDrawPage };\r\n","import { useRef, useEffect } from 'react';\r\ninterface IUseConditionEffectOption {\r\n  componentDidUpdateCondition?: boolean;\r\n  componentDidMountCondition?: boolean;\r\n}\r\nconst useConditionEffect = (\r\n  effectFunction: () => void,\r\n  deps: any[],\r\n  option: IUseConditionEffectOption,\r\n) => {\r\n  const didMountRef = useRef(false);\r\n  const {\r\n    componentDidUpdateCondition = true,\r\n    componentDidMountCondition = true,\r\n  } = option;\r\n\r\n  useEffect(() => {\r\n    if (!didMountRef.current) {\r\n      didMountRef.current = true;\r\n      if (componentDidMountCondition) {\r\n        effectFunction();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (componentDidUpdateCondition) {\r\n      effectFunction();\r\n    }\r\n  }, deps); //eslint-disable-line\r\n};\r\n\r\nexport { useConditionEffect };\r\n"],"names":["IndexPage","Container","Box","Title","Text","styled","BaseCanvas","NamedLazy","CanvasBasicDrawPage","canvasRef","useRef","contextRef","canvasInformRef","width","height","pixelRatio","window","devicePixelRatio","useState","isDown","setIsDown","useEffect","init","current","resultWidth","resultHeight","canvasSizeSetting","innerWidth","innerHeight","context","getContext","scale","lineCap","strokeStyle","lineWidth","ref","onPointerDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onPointerMove","lineTo","stroke","onPointerUp","closePath","contextUtils","objectXY","x","y","drawDot","radius","arc","Math","PI","fill","drawLineCurve","points","i","len","length","cpx","cpy","quadraticCurveTo","drawLineQuadraticWithPoints","startPoint","lastTwoPoints","movePoints","slice","controlPoint","endPoint","canvasDownloadImage","canvasEl","imgName","type","quality","imgType","imgQuality","url","toDataURL","Error","canvasToDataUrl","imgExtension","toString","trim","split","link","document","createElement","download","href","click","undefined","draw","rect","fillStyle","save","restore","circle","startAngle","endAngle","methodUtils","setTransform","skew","move","h","v","eventUtils","touches","utils","event","method","lazily","CanvasSmoothDrawPage","containerRef","pptsRef","initCanvas","canvasElement","target","offsetWidth","offsetHeight","canvasContextSetting","CanvasWrap","push","ppts","CanvasResizeDrawPage","ContainerResizeObserverRef","initObserver","unobserve","disconnect","clientWidth","clientHeight","ResizeObserver","entries","entry","contentBoxSize","Array","isArray","temp","getImageData","inlineSize","blockSize","putImageData","err","PolyfillResizeObserver","observe","CanvasOptimizedDrawPage","containerElRef","canvasElRef","informRef","stageWidth","stageHeight","containerResizeObserverRef","startPointRef","movePointsRef","CanvasColorWidthDrawPage","color","setColor","setLineWidth","onChangeColor","e","prev","value","onChangeRange","numValue","parseInt","onClickSave","ToolWrap","React","modules","Tools","Zoom","zoom","onClickZoom","ZoomButton","onClick","ZoomText","parseFloat","toFixed","ZOOM_DIGIT","CanvasZoomDrawPage","pointsRef","down","distanceRef","up","centerPosRef","setZoom","translate","setTranslate","containerRect","getBoundingClientRect","canvas","drawCanvas","canvasWidth","canvasHeight","getCenter","p1","p2","getDistance","sqrt","pow","multiPointer","targetPoints","pointEvent","findIndex","item","pointerId","setZoomMinMax","prevValue","newValue","isValid","num","effectFunction","deps","option","didMountRef","componentDidUpdateCondition","componentDidMountCondition","useConditionEffect","redraw","zoomState","clearRect","handleClickZoom","useCallback","digit","useMemo","touch1","touch2","center","distance","diffCenter","diffDistance","newZoom"],"sourceRoot":""}