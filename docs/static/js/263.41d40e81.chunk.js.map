{"version":3,"file":"static/js/263.41d40e81.chunk.js","mappings":"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","sources":["pages/index-page/index-page.page.tsx","pages/canvas-basic-draw/canvas-basic-draw.page.tsx","lib/utils/canvas/context.util.ts","lib/utils/utils.util.ts","pages/canvas-smooth-draw/canvas-smooth-draw.page.tsx","pages/canvas-resize-draw/canvas-resize-draw.page.tsx","pages/canvas-optimized-draw/canvas-optimized-draw.page.tsx","pages/canvas-color-width-draw/canvas-color-width-draw.page.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nconst IndexPage = () => {\r\n  return (\r\n    <Container>\r\n      <Box>\r\n        <Title>HTML5 Canvas 테스트</Title>\r\n        <Text>HTML5 Canvas 2D 드로잉을 테스트하는 페이지입니다.</Text>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\nconst Box = styled.div`\r\n  padding: 50px 0;\r\n  text-align: center;\r\n`;\r\nconst Title = styled.h1`\r\n  font-size: 36px;\r\n  line-height: 40px;\r\n  font-weight: bold;\r\n`;\r\nconst Text = styled.p`\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport { IndexPage };\r\n","import { useEffect, useState, useRef, PointerEvent } from 'react';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\nconst CanvasBasicDrawPage: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n  const canvasInformRef = useRef({\r\n    width: 0,\r\n    height: 0,\r\n    pixelRatio: window.devicePixelRatio > 1 ? 2 : 1,\r\n  });\r\n\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasRef.current) return;\r\n\r\n    const resultWidth = width * canvasInformRef.current.pixelRatio;\r\n    const resultHeight = height * canvasInformRef.current.pixelRatio;\r\n    canvasRef.current.width = resultWidth;\r\n    canvasRef.current.height = resultHeight;\r\n    canvasInformRef.current.width = resultWidth;\r\n    canvasInformRef.current.height = resultHeight;\r\n  };\r\n\r\n  const canvasContextSetting = (context: CanvasRenderingContext2D) => {\r\n    if (!context) return;\r\n    context.scale(\r\n      canvasInformRef.current.pixelRatio,\r\n      canvasInformRef.current.pixelRatio,\r\n    );\r\n    context.lineCap = 'round';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 3;\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasRef.current) return;\r\n    const { innerWidth, innerHeight } = window;\r\n    canvasSizeSetting(innerWidth, innerHeight);\r\n    const getContext = canvasRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    canvasContextSetting(getContext);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    setIsDown(true);\r\n    if (!contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(offsetX, offsetY);\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.lineTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    if (!contextRef.current) return;\r\n    contextRef.current.closePath();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <BaseCanvas\r\n        ref={canvasRef}\r\n        onPointerDown={handlePointerDown}\r\n        onPointerMove={handlePointerMove}\r\n        onPointerUp={handlePointerUp}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CanvasBasicDrawPage };\r\n","type ObjectXYType = { x: number; y: number };\r\n\r\nfunction pixelRatio(): number {\r\n  return window.devicePixelRatio > 1 ? 2 : 1;\r\n}\r\n\r\nfunction objectXY(x: number, y: number): ObjectXYType {\r\n  return { x: x, y: y };\r\n}\r\n\r\ntype ContextDotOptionsType = { x: number; y: number; radius: number };\r\nfunction drawDot(\r\n  context: CanvasRenderingContext2D,\r\n  { x, y, radius }: ContextDotOptionsType,\r\n): { context: CanvasRenderingContext2D } {\r\n  context.beginPath();\r\n  context.arc(x, y, radius, 0, Math.PI * 2, !0);\r\n  context.fill();\r\n  context.closePath();\r\n\r\n  return { context };\r\n}\r\n\r\ntype ContextLineWithQuadrationOptionsType = {\r\n  points: ObjectXYType[];\r\n};\r\n// version 1\r\nfunction drawLineCurve(\r\n  context: CanvasRenderingContext2D,\r\n  { points }: ContextLineWithQuadrationOptionsType,\r\n): void {\r\n  context.beginPath();\r\n  context.moveTo(points[0].x, points[0].y);\r\n\r\n  for (let i = 1, len = points.length; i < len - 2; i++) {\r\n    const cpx = points[i].x;\r\n    const cpy = points[i].y;\r\n    const x = (cpx + points[i + 1].x) / 2;\r\n    const y = (cpy + points[i + 1].y) / 2;\r\n\r\n    context.quadraticCurveTo(cpx, cpy, x, y);\r\n  }\r\n\r\n  context.stroke();\r\n}\r\n\r\ntype QuadraticWithPointsOptionsType = {\r\n  startPoint: ObjectXYType;\r\n  movePoints: ObjectXYType[];\r\n};\r\n\r\n// version 2\r\nfunction drawLineQuadraticWithPoints(\r\n  context: CanvasRenderingContext2D,\r\n  { startPoint, movePoints }: QuadraticWithPointsOptionsType,\r\n): { context: CanvasRenderingContext2D; endPoint: ObjectXYType } {\r\n  const lastTwoPoints = movePoints.slice(-2);\r\n  const controlPoint = lastTwoPoints[0];\r\n  const endPoint = {\r\n    x: (lastTwoPoints[0].x + lastTwoPoints[1].x) / 2,\r\n    y: (lastTwoPoints[0].y + lastTwoPoints[1].y) / 2,\r\n  };\r\n\r\n  context.beginPath();\r\n  context.moveTo(startPoint.x, startPoint.y);\r\n  context.quadraticCurveTo(\r\n    controlPoint.x,\r\n    controlPoint.y,\r\n    endPoint.x,\r\n    endPoint.y,\r\n  );\r\n  context.stroke();\r\n  context.closePath();\r\n\r\n  return { context, endPoint };\r\n}\r\n\r\nconst contextUtils = {\r\n  pixelRatio,\r\n  objectXY,\r\n  drawDot,\r\n  drawLineCurve,\r\n  drawLineQuadraticWithPoints,\r\n};\r\n\r\nexport { contextUtils };\r\nexport type {};\r\n","import { contextUtils } from './canvas';\r\nconst utils = {\r\n  context: { ...contextUtils },\r\n};\r\n\r\nexport { utils };\r\n","import { useEffect, useState, useRef, PointerEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { lazily } from 'react-lazily';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// base-components\r\nconst { BaseCanvas } = lazily(() => import('@/base-components'));\r\n\r\nconst pixelRatio = window.devicePixelRatio > 1 ? 2 : 1;\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasSmoothDrawPage: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const canvasInformRef = useRef({ width: 0, height: 0 });\r\n  const pptsRef = useRef<pointType[]>([]);\r\n\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    initCanvas();\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (\r\n    canvasElement: HTMLCanvasElement,\r\n    target: Window | HTMLElement,\r\n  ) => {\r\n    let width = 0;\r\n    let height = 0;\r\n    if (target === window) {\r\n      const { innerWidth, innerHeight } = target as Window;\r\n      width = innerWidth;\r\n      height = innerHeight;\r\n    } else {\r\n      const { offsetWidth, offsetHeight } = target as HTMLElement;\r\n      width = offsetWidth;\r\n      height = offsetHeight;\r\n    }\r\n\r\n    const resultWidth = width * pixelRatio;\r\n    const resultHeight = height * pixelRatio;\r\n    canvasElement.width = resultWidth;\r\n    canvasElement.height = resultHeight;\r\n    canvasInformRef.current = { width: resultWidth, height: resultHeight };\r\n  };\r\n  const canvasContextSetting = (canvasElement: HTMLCanvasElement) => {\r\n    const getContext = canvasElement.getContext('2d');\r\n\r\n    if (!getContext) return;\r\n\r\n    getContext.scale(pixelRatio, pixelRatio);\r\n    getContext.lineCap = 'round';\r\n    getContext.strokeStyle = 'black';\r\n    getContext.lineWidth = 3;\r\n    contextRef.current = getContext;\r\n  };\r\n\r\n  const initCanvas = () => {\r\n    if (!canvasRef.current || !containerRef.current) return;\r\n    const canvasEl = canvasRef.current;\r\n    const containerEl = containerRef.current;\r\n    canvasSizeSetting(canvasEl, containerEl);\r\n    canvasContextSetting(canvasEl);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    if (!contextRef.current) return;\r\n    setIsDown(true);\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    pptsRef.current.push({ x: offsetX, y: offsetY });\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const ppts = pptsRef.current;\r\n    ppts.push({ x: offsetX, y: offsetY });\r\n\r\n    utils.context.drawLineCurve(contextRef.current, { points: ppts });\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    pptsRef.current = [];\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CanvasWrap ref={containerRef}>\r\n        <BaseCanvas\r\n          ref={canvasRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 0;\r\n`;\r\n\r\nexport { CanvasSmoothDrawPage };\r\n","import {\r\n  useEffect,\r\n  useState,\r\n  useRef,\r\n  MouseEvent,\r\n  TouchEvent,\r\n  PointerEvent,\r\n  Suspense,\r\n} from 'react';\r\nimport PolyfillResizeObserver from 'resize-observer-polyfill';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasResizeDrawPage: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const canvasInformRef = useRef({\r\n    width: 0,\r\n    height: 0,\r\n    pixelRatio: utils.context.pixelRatio(),\r\n  });\r\n  const pptsRef = useRef<pointType[]>([]);\r\n\r\n  const ContainerResizeObserverRef = useRef<ResizeObserver>();\r\n\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    init();\r\n    initObserver();\r\n\r\n    return () => {\r\n      if (!ContainerResizeObserverRef.current || !containerRef.current) return;\r\n      ContainerResizeObserverRef.current.unobserve(containerRef.current);\r\n      ContainerResizeObserverRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasRef.current) return;\r\n\r\n    const resultWidth = width * canvasInformRef.current.pixelRatio;\r\n    const resultHeight = height * canvasInformRef.current.pixelRatio;\r\n    canvasRef.current.width = resultWidth;\r\n    canvasRef.current.height = resultHeight;\r\n    canvasInformRef.current.width = resultWidth;\r\n    canvasInformRef.current.height = resultHeight;\r\n  };\r\n\r\n  const canvasContextSetting = (context: CanvasRenderingContext2D) => {\r\n    if (!context) return;\r\n    context.scale(\r\n      canvasInformRef.current.pixelRatio,\r\n      canvasInformRef.current.pixelRatio,\r\n    );\r\n    context.lineCap = 'round';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 3;\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasRef.current || !containerRef.current) return;\r\n    const { clientWidth, clientHeight } = containerRef.current;\r\n    canvasSizeSetting(clientWidth, clientHeight);\r\n    const getContext = canvasRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    canvasContextSetting(getContext);\r\n  };\r\n\r\n  const initObserver = () => {\r\n    if (!containerRef.current) return;\r\n    ContainerResizeObserverRef.current = window.ResizeObserver\r\n      ? new ResizeObserver(entries => {\r\n          for (let entry of entries) {\r\n            if (entry.contentBoxSize) {\r\n              const contentBoxSize = Array.isArray(entry.contentBoxSize)\r\n                ? entry.contentBoxSize[0]\r\n                : entry.contentBoxSize;\r\n              if (contextRef.current) {\r\n                // canvasInformRef.current.pixelRatio = utils.context.pixelRatio();\r\n                // const tempSize = canvasInformRef.current;\r\n                try {\r\n                  const temp = contextRef.current.getImageData(\r\n                    0,\r\n                    0,\r\n                    canvasInformRef.current.width,\r\n                    canvasInformRef.current.height,\r\n                  );\r\n                  canvasSizeSetting(\r\n                    contentBoxSize.inlineSize,\r\n                    contentBoxSize.blockSize,\r\n                  );\r\n                  canvasContextSetting(contextRef.current);\r\n                  contextRef.current.putImageData(\r\n                    temp,\r\n                    0,\r\n                    0,\r\n                    // 0,\r\n                    // 0,\r\n                    // contentBoxSize.inlineSize + tempSize.width,\r\n                    // contentBoxSize.blockSize + tempSize.height,\r\n                  );\r\n                } catch (err) {}\r\n              }\r\n            }\r\n          }\r\n        })\r\n      : new PolyfillResizeObserver(entries => {});\r\n    ContainerResizeObserverRef.current.observe(containerRef.current);\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    if (!contextRef.current) return;\r\n    setIsDown(true);\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    pptsRef.current.push({ x: offsetX, y: offsetY });\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const ppts = pptsRef.current;\r\n    ppts.push({ x: offsetX, y: offsetY });\r\n\r\n    utils.context.drawLineCurve(contextRef.current, { points: ppts });\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    setIsDown(false);\r\n    pptsRef.current = [];\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CanvasWrap ref={containerRef}>\r\n        <BaseCanvas\r\n          ref={canvasRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 0;\r\n  position: relative;\r\n`;\r\n\r\nexport { CanvasResizeDrawPage };\r\n","import { useEffect, useState, useRef, PointerEvent } from 'react';\r\nimport PolyfillResizeObserver from 'resize-observer-polyfill';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\n\r\nconst CanvasOptimizedDrawPage: React.FC = () => {\r\n  // element\r\n  const containerElRef = useRef<HTMLDivElement>(null);\r\n  const canvasElRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // object\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const informRef = useRef({\r\n    stageWidth: 0,\r\n    stageHeight: 0,\r\n    pixelRatio: utils.context.pixelRatio(),\r\n  });\r\n\r\n  // variable\r\n  const startPointRef = useRef({ x: 0, y: 0 });\r\n  const movePointsRef = useRef<pointType[]>([]);\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    init();\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasElRef.current) return;\r\n\r\n    const resultWidth = width * informRef.current.pixelRatio;\r\n    const resultHeight = height * informRef.current.pixelRatio;\r\n    canvasElRef.current.width = resultWidth;\r\n    canvasElRef.current.height = resultHeight;\r\n    informRef.current.stageWidth = resultWidth;\r\n    informRef.current.stageHeight = resultHeight;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasElRef.current || !canvasElRef.current) return;\r\n    const { clientWidth, clientHeight } = canvasElRef.current;\r\n    canvasSizeSetting(clientWidth, clientHeight);\r\n    const getContext = canvasElRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    getContext.scale(\r\n      informRef.current.pixelRatio,\r\n      informRef.current.pixelRatio,\r\n    );\r\n    getContext.lineCap = 'round';\r\n    getContext.strokeStyle = 'black';\r\n    getContext.lineWidth = 10;\r\n    contextRef.current = getContext;\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    setIsDown(true);\r\n    if (!contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n    startPointRef.current = { x: offsetX, y: offsetY };\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context, endPoint } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n      startPointRef.current = endPoint;\r\n    }\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    if (!isDown || !contextRef.current) return;\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n    }\r\n    setIsDown(false);\r\n    movePointsRef.current = [];\r\n    startPointRef.current = { x: 0, y: 0 };\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CanvasWrap ref={containerElRef}>\r\n        <BaseCanvas\r\n          ref={canvasElRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 0;\r\n  position: relative;\r\n`;\r\n\r\nexport { CanvasOptimizedDrawPage };\r\n","import { useEffect, useState, useRef, PointerEvent, ChangeEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// modules\r\nimport { NamedLazy } from '@/core/modules';\r\n\r\n// utils\r\nimport { utils } from '@/lib/utils';\r\n\r\n// containers\r\nimport { ColorWidthToolsContainer } from '@/containers';\r\n\r\n// base-components\r\nconst { BaseCanvas } = NamedLazy(() => import('@/base-components'));\r\n\r\ntype pointType = { x: number; y: number };\r\ntype HEXType = `#${string}`;\r\n\r\nconst CanvasColorWidthDrawPage: React.FC = () => {\r\n  // element\r\n  const containerElRef = useRef<HTMLDivElement>(null);\r\n  const canvasElRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // object\r\n  const contextRef = useRef<CanvasRenderingContext2D>();\r\n  const informRef = useRef({\r\n    stageWidth: 0,\r\n    stageHeight: 0,\r\n    pixelRatio: utils.context.pixelRatio(),\r\n  });\r\n\r\n  // variable\r\n  const startPointRef = useRef({ x: 0, y: 0 });\r\n  const movePointsRef = useRef<pointType[]>([]);\r\n  const [isDown, setIsDown] = useState<boolean>(false);\r\n\r\n  const [color, setColor] = useState<string>('#000000');\r\n  const [lineWidth, setLineWidth] = useState<number>(3);\r\n\r\n  useEffect(() => {\r\n    init();\r\n    return () => {\r\n      movePointsRef.current = [];\r\n    };\r\n  }, []);\r\n\r\n  const canvasSizeSetting = (width: number, height: number) => {\r\n    if (!canvasElRef.current) return;\r\n\r\n    const resultWidth = width * informRef.current.pixelRatio;\r\n    const resultHeight = height * informRef.current.pixelRatio;\r\n    canvasElRef.current.width = resultWidth;\r\n    canvasElRef.current.height = resultHeight;\r\n    informRef.current.stageWidth = resultWidth;\r\n    informRef.current.stageHeight = resultHeight;\r\n  };\r\n\r\n  const init = () => {\r\n    if (!canvasElRef.current || !canvasElRef.current || !containerElRef.current)\r\n      return;\r\n    const { clientWidth, clientHeight } = containerElRef.current;\r\n    canvasSizeSetting(clientWidth, clientHeight);\r\n    const getContext = canvasElRef.current.getContext('2d');\r\n    if (!getContext) return;\r\n    getContext.scale(\r\n      informRef.current.pixelRatio,\r\n      informRef.current.pixelRatio,\r\n    );\r\n    getContext.lineCap = 'round';\r\n    getContext.strokeStyle = color;\r\n    getContext.fillStyle = color;\r\n    getContext.lineWidth = lineWidth;\r\n    contextRef.current = getContext;\r\n  };\r\n\r\n  const handlePointerDown = ({ nativeEvent }: PointerEvent) => {\r\n    setIsDown(true);\r\n    if (!contextRef.current) return;\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const { context } = utils.context.drawDot(contextRef.current, {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: contextRef.current.lineWidth / 2,\r\n    });\r\n\r\n    contextRef.current = context;\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n    startPointRef.current = { x: offsetX, y: offsetY };\r\n  };\r\n\r\n  const handlePointerMove = ({ nativeEvent }: PointerEvent) => {\r\n    if (!isDown || !contextRef.current) return;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    movePointsRef.current.push({ x: offsetX, y: offsetY });\r\n\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context, endPoint } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n      startPointRef.current = endPoint;\r\n    }\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    if (!isDown || !contextRef.current) return;\r\n    if (movePointsRef.current.length > 3) {\r\n      const { context } = utils.context.drawLineQuadraticWithPoints(\r\n        contextRef.current,\r\n        {\r\n          startPoint: startPointRef.current,\r\n          movePoints: movePointsRef.current,\r\n        },\r\n      );\r\n      contextRef.current = context;\r\n    }\r\n    setIsDown(false);\r\n    movePointsRef.current = [];\r\n    startPointRef.current = { x: 0, y: 0 };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!contextRef.current) return;\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.fillStyle = color;\r\n  }, [color]);\r\n  useEffect(() => {\r\n    if (!contextRef.current) return;\r\n    contextRef.current.lineWidth = lineWidth;\r\n  }, [lineWidth]);\r\n\r\n  const handleChangeColor = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!contextRef.current) return;\r\n    setColor(prev => (prev !== e.target.value ? e.target.value : prev));\r\n  };\r\n  const handleChangeRange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!contextRef.current) return;\r\n    const numValue = parseInt(e.target.value, 10);\r\n    setLineWidth(prev => (prev !== numValue ? numValue : prev));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ColorWidthToolsContainer\r\n        onChangeColor={handleChangeColor}\r\n        onChangeRange={handleChangeRange}\r\n        color={color}\r\n        lineWidth={lineWidth}\r\n      />\r\n      <CanvasWrap ref={containerElRef}>\r\n        <BaseCanvas\r\n          ref={canvasElRef}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerMove={handlePointerMove}\r\n          onPointerUp={handlePointerUp}\r\n        />\r\n      </CanvasWrap>\r\n    </Container>\r\n  );\r\n};\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasWrap = styled.div`\r\n  width: 100%;\r\n  height: calc(100% - 50px);\r\n  font-size: 0;\r\n  position: relative;\r\n`;\r\n\r\nexport { CanvasColorWidthDrawPage };\r\n"],"names":["IndexPage","Container","Box","Title","Text","styled","BaseCanvas","NamedLazy","CanvasBasicDrawPage","canvasRef","useRef","contextRef","canvasInformRef","width","height","pixelRatio","window","devicePixelRatio","useState","isDown","setIsDown","useEffect","init","current","resultWidth","resultHeight","canvasSizeSetting","innerWidth","innerHeight","context","getContext","scale","lineCap","strokeStyle","lineWidth","ref","onPointerDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onPointerMove","lineTo","stroke","onPointerUp","closePath","contextUtils","objectXY","x","y","drawDot","radius","arc","Math","PI","fill","drawLineCurve","points","i","len","length","cpx","cpy","quadraticCurveTo","drawLineQuadraticWithPoints","startPoint","lastTwoPoints","movePoints","slice","controlPoint","endPoint","utils","lazily","CanvasSmoothDrawPage","containerRef","pptsRef","initCanvas","canvasEl","canvasElement","target","offsetWidth","offsetHeight","canvasContextSetting","CanvasWrap","push","ppts","CanvasResizeDrawPage","ContainerResizeObserverRef","initObserver","unobserve","disconnect","clientWidth","clientHeight","ResizeObserver","entries","entry","contentBoxSize","Array","isArray","temp","getImageData","inlineSize","blockSize","putImageData","err","PolyfillResizeObserver","observe","CanvasOptimizedDrawPage","containerElRef","canvasElRef","informRef","stageWidth","stageHeight","startPointRef","movePointsRef","CanvasColorWidthDrawPage","color","setColor","setLineWidth","fillStyle","onChangeColor","e","prev","value","onChangeRange","numValue","parseInt"],"sourceRoot":""}